#!/bin/sh

# We read proprietary_files.txt
# For each line, we check whether it is commented out, ("#"),
# whether it contains a filename ("/") and to which vendor package it belongs.

set -e

DEVICE=kai
VENDORS="broadcom invensense nvidia widevine"


init_makefiles () {
# Call this function $OUTDIR as argument
if [ ! -e $1/device-partial.mk.new ] ; then

  echo Initiating $1/device-partial.mk.new
  (cat << EOF) > $1/device-partial.mk.new
# Copyright (C) 2010 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file is generated by device/lenovo/kai/setup-makefiles.sh
EOF

  # Then, cat the existing device-partial.mk into the new makefile
  for j in $(cat $1/device-partial.mk | grep -v \# | awk '{ print $1 }' ) ; do
    #TODO  IF IT SHOULD NOT BE REMOVED, e.g., gralloc.tegra3.so
    if [ ! -z ${j// } ] ; then
      echo "    $j \\" >> $1/device-partial.mk.new
    fi
  done

  # Also do this for the Android.mk file in the proprietary directory
  echo Initiating $1/proprietary/Android.mk.new
  LENGTH=$(wc -l $1/proprietary/Android.mk | awk '{ print $1 }' )
  LENGTH=$(( ${LENGTH} - 1 ))
  head $1/proprietary/Android.mk -n $LENGTH > $1/proprietary/Android.mk.new
fi
}

add_module() {
# We need to set several fields:
LOCAL_SRC_FILES=$(basename $FILE)
if echo $LOCAL_SRC_FILES | grep \. ; then
   LOCAL_MODULE_SUFFIX=\.$(echo $LOCAL_SRC_FILES | rev | awk -F . '{ print $1 }' | rev)
   LOCAL_MODULE=$(echo $LOCAL_SRC_FILES | tr -d $LOCAL_MODULE_SUFFIX)
elif echo $LOCAL_SRC_FILES | grep -v \. ; then
   LOCAL_MODULE=$LOCAL_SRC_FILES
fi
LOCAL_MODULE_CLASS= # one of EXECUTABLES (no module suffix), SHARED_LIBRARIES (filename ends .so), APPS for an apk, or ETC (any other)
                    # Actually, much simpler, executables have a dirname that starts with bin.
LOCAL_MODULE_PATH=$(dirname $FILE)
LOCAL_MODULE_OWNER=$(echo $VENDOR | sed -e 's/\(.*\)/\L\1/')

# Now echo the new module to Android.mk.new (note the trailing line of whitespace):
# REMOVE BACKSLASHES LATER
echo include \$\(CLEAR_VARS\) \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE := $LOCAL_MODULE \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_SRC_FILES := $LOCAL_SRC_FILES \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE_SUFFIX := $LOCAL_MODULE_SUFFIX  \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE_CLASS := $LOCAL_MODULE_CLASS \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE_PATH := \$\(TARGET_OUT\)/$LOCAL_MODULE_PATH \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE_TAGS := optional \>\> $OUTDIR/proprietary/Android.mk.new
echo LOCAL_MODULE_OWNER := $LOCAL_MODULE_OWNER \>\> $OUTDIR/proprietary/Android.mk.new
echo include \$\(BUILD_PREBUILT\) \>\> $OUTDIR/proprietary/Android.mk.new
echo  \>\> $OUTDIR/proprietary/Android.mk.new

}


for h in $VENDORS; do
  echo $h
  init_makefiles ../../../vendor/$h/$DEVICE
done

# Now the real work starts

for FILE in `cat proprietary-files.txt`; do
  case $FILE in
    "#"*)
      #echo Commented: $FILE
      for i in $VENDORS; do
        if [[ "$i" == "$(echo $FILE | sed s'/#//')" ]] ; then
          VENDOR=$i
          OUTDIR="../../../vendor/$VENDOR/$DEVICE"
        fi
      done
      ;;   
    *"/"*)
      EXISTING=false
      if [ -e $OUTDIR/proprietary/$(basename $FILE) ] ; then
        EXISTING=true
        # echo $FILE exists
      #else
        # echo $FILE does not exist
      fi

      case $EXISTING in
        true)
          echo cp lenovo-kai-proprietary/$FILE $OUTDIR/proprietary/$(basename $FILE)
          ;;
        false)
          add_module $FILE
          ;;
      esac
      ;;
  esac
done

# Now deal with the new makefiles
for k in $VENDORS; do
  if [ -e ../../../vendor/$k/$DEVICE/device-partial.mk.new ] ; then
    # Deal with trailing slashes in device-partial.mk
    LENGTH=$(wc -l ../../../vendor/$k/$DEVICE/device-partial.mk.new | awk '{print $1}')
    LENGTH=$(( ${LENGTH} - 1 ))
    head -n $LENGTH ../../../vendor/$k/$DEVICE/device-partial.mk.new > ../../../vendor/$k/$DEVICE/device-partial.mk
    tail -n 1 ../../../vendor/$k/$DEVICE/device-partial.mk.new | sed 's/\\//g' > ../../../vendor/$k/$DEVICE/device-partial.mk
    # Echo endif into Android.mk.new and move it over
    echo endif >> ../../../vendor/$k/$DEVICE/proprietary/Android.mk.new
    echo "mv ../../../vendor/$k/$DEVICE/proprietary/Android.mk.new ../../../vendor/$k/$DEVICE/proprietary/Android.mk"
  fi
done
